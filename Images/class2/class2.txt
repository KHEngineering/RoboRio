##Navigation
* These slides are organized by topic and run completely in your browser
* Press Left, Right, Up, Or Down to Navigate through the slides
* Press (Esc) to see the entire slide package
* Press (F) to full screen the presentation
<br><br>

> These are `cubed` slides when you see the **&#8659; More** Symbol, press the down key to move down to the next slide in the section.

<br><br>

> Once the section is finished, move to the right to continue to the next section of the presentation.

<br><br>

> The Navigation Icon in the bottom right corner will tell you which directions you can move.

---

##Review of Last Class

* Computers only understand 0's and 1's, humans use programming languages to avoid writing machine language
* Compilers translate programming languages to machine code - called "compiling"
* Java is the language we use on this team for Robotics Competition

<br><br>
&#8659;
More

--

##Review of Last Class (cont. 2)

* Java compiles to Byte-code first, and uses an interpreter on the computer to convert byte-code to 0's and 1's
* The interpreter works by converthing a single line to byte code, executing it, then moving to the next byte code line
* The interpreter is called the JVM, and your byte code can run on any computer as long as a JVM is installed

<br><br>
&#8659;
More

--

##Review of Last class (cont. 3)

* we wrote our first java program
* defined `class header`, `class body`, `method header`, `method body`, `main method`
* every java program is a class with a main method defined 

##Review of Last class (cont. 4)
* learned we could print statements using `System.out.println("say something");`
* every java statement ends with a semi colon ( ; )
* java is case sensitive
* java has built in math operations for `+, -. * (asterisk), / (forward slash)`

##Review of Last class (cont. 5)
* Java allows to create variables, but you must decalare the type of data you want to use it for
 - `int`: allows you to store integers (e.g whole numbers like 1, -30, 45, 10003)
 - `double`: allows you to store decimal numbers (e.g 1.0, 2.5, -35.6, 3.141519)
 - `String`: allows you to store text but must be placed in quotations (e.g. "hello", "my name is kevin")
* using the word `final` before any variable allows us to make it a constant


<br><br>
&#8659;
More

--

##Review of Last class (cont. 5)
* Using the ( = ) operator we can assign values to variables, and use those variables later in our program
* there are rules for naming variables `topSpeed, bankRate1, timeOfArrival`
* there are rules for naming constants `MY_NAME, PENNIES_PER_DOLLAR, MY_AGE`
* we can use the ( + ) operator for combining Strings as well as addition

##Review of Last class (cont. 6)

###Most Important thing we learned last week

* You wrote real computer programs
* Realized that java is a language, just like English or French, it has rules for sentance structure, but other wise can be learned with a little practice

> This is where we will continue today

---

##Language Syntax

Syntax:  The arrangement of words and punctuations that are legal in a language, the grammar rules of a language

We have learned a few Syntax rules of the Java language so far

- java is case sensitive
- must write `public static void main(String[] args)` to start a program
- every program must be in a `class` definiton
- every statement must end with a semi colon ( ; )

If you do not follow the rules of the Java Syntax, your program will not run, because the compiler will be unable to convert it to 0's and 1's

<br><br>
&#8659;
More

--

##Language Keywords

Certain words in Java have special meanings and alter how the program is executed. These words are called keywords

```java 

public final class int double static 

```

> when these words are written Java recognises them as a special term used to control the program. We will learn more keywords as we learn the language

<br><br>

> You can not use a keyword as the name of any variable, java will get confused. 

```java

double final = 37.6; //this is illegal because final is a keyword, 
                     //and can't be used as a variable name.

<br><br>
&#8659;
More

--
 

##Syntax Errors

One of the reasons we use the eclipse editor, is because it will tell us if we have made any syntax errors. Here we are missing a semi-colon at the end of the statement ( ; )

<img src = "khengineering.github.io/FRCJavaCourse2015/Images/class2/semicolonerror.png">

<br><br>
&#8659;
More

--

##More Syntax Errors

<img src = "khengineering.github.io/FRCJavaCourse2015/Images/class2/lowercaseerror.png">

>Error is Lower case S in System

<br><br>
&#8659;
More

--

##More Syntax Errors

<img src = "khengineering.github.io/FRCJavaCourse2015/Images/class2/multipleerrors.png">

>Error: Missing bracket, and trying to assign a value to a constant, but only shows one error

<br><br>
&#8659;
More

--

##Errors are Natural

As a programmer you will get errors, the key isn't to avoid them, but to be sure to recognize them
<br><br>

Sometimes the error message is a bit cryptic, with experience you will be able to determine what it means

<br><br>

In cases where you have multiple errors, the compiler will only show one, and you must continue to fix each error until the compiler is happy.

<br><br>

> The Compiler is the Java Language Instructor, you must follow the Java syntax rules, in order for your program to execute

---

##Branching with Java

We may wish to write a program that makes decisions, and executes different code depending on the situation.

```java

//program to calculate salary for hourly employee
public static void main(String[] args)
{
    int hoursWorked = 40; //declare int and initialze

    double pay; //declared double unitialized

    final PAY_PER_HR = 18; //18 dollars per hr

    if (hoursWorked > 40)
        pay = PAY_PER_HR * hoursWorked;
    else
        pay = PAY_PER_HR * hoursWorked + 1.5*PAY_PER_HR*(hoursWorked-40);

    System.out.println("Hours Worked This Week: " + hoursWorked);
    System.out.println("Your PayRate is: " + PAY_PER_HR);
    System.out.println("This week's paycheck is: " + pay);

}
```


<br><br>
&#8659;
More

--

##Let's break it down

```java
public static void main(String[] args)
{
    int hoursWorked = 40; //declare int and initialze

    double pay; //declared double unitialized

    final double PAY_PER_HR = 18.0; //18 dollars per hr
```

We start our program and declare `hourWorked` as an `int` and set it to a value of 40 hours.
We also decale the variable `pay` as a type of `double` but do not set a value
We then create a constant of type `double` named `PAY_PER_HR`


<br><br>
&#8659;
More

--

##Let's break it down (cont)

```java
public static void main(String[] args)
{

    if (hoursWorked > 40)
        pay = PAY_PER_HR * hoursWorked;
    else
        pay = PAY_PER_HR * hoursWorked + 1.5*PAY_PER_HR*(hoursWorked-40);
```

if the value of hoursWorked is greater than 40, java will execute 


<br><br>
&#8659;
More

--

##Branching with the `IF` statement
We can make decisions in programs using the IF statement

```java
public static void main(String[] args)
{

  double x = 10;
  
  if (x < 10)
      System.out.println("Hello World")
      
   System.out.println("Good-bye world");
}
```
<br><br>
&#8659;
More

--

##Lets break it down
<br><br>
<img src="http://khengineering.github.com/FRCJavaCourse2015/Images/class1/ifstatement.png" width="1000" height="600">
<br><br>
&#8659;
More

--

##Compound Statement  
If the statement under if is made up of more than one statement, they must be enclosed in curly braces ({ })
<br><br>
```java
if (amount < balance)
{
	System.out.println(“Thank you. Withdrawal will take place”);
	balance = balance – amount;
}
```

> Any statements inside of the brackets undeer the `if` will be executed when ever the condition of the IF statement is true. 

---

##Indenting
We will say more about indenting as we introduce more Java. However, the general
rule is easy to understand and easy to follow. When one structure is nested inside
another structure, the inside structure is indented one more level. For example, in our
programs, the main method is indented one level, and the statements inside the main
method are indented two levels. We prefer to use four spaces for each level of indenting.
More than four spaces eats up too much line length. It is possible to get by with
indenting only two or three spaces for each level so long as you are consistent. One
space for a level of indenting is not enough to be clearly visible.


  